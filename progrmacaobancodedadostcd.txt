#Gabriel Macieski Cortes RA 8056919

CREATE DATABASE ProgramacaoBancoDeDados;
USE ProgramacaoBancoDeDados;

CREATE TABLE DEPARTAMENTO(COD_DEPARTAMENTO INT,
NOM_DEPARTAMENTO VARCHAR (100),
IDF_ATIVO VARCHAR(1),
PRIMARY KEY(COD_DEPARTAMENTO));



CREATE TABLE MEDICO(CRM_MEDICO INT,
NOM_MEDICO VARCHAR(255),
COD_DEPARTAMENTO INT,
PRIMARY KEY(CRM_MEDICO),
FOREIGN KEY (COD_DEPARTAMENTO) REFERENCES DEPARTAMENTO(COD_DEPARTAMENTO));

CREATE TABLE ESPECIALIDADE(COD_ESPECIALIDADE INT,
DSC_ESPECIALIDADE VARCHAR(150),
PRIMARY KEY (COD_ESPECIALIDADE));

CREATE TABLE ESPECIALIDADE_MEDICO(CRM_MEDICO INT,
COD_ESPECIALIDADE INT,
FOREIGN KEY (CRM_MEDICO) REFERENCES MEDICO(CRM_MEDICO),
FOREIGN KEY (COD_ESPECIALIDADE) REFERENCES ESPECIALIDADE(COD_ESPECIALIDADE));

CREATE TABLE TIPO_SALA(COD_TIPO_SALA INT,
DSC_TIPO_SALA VARCHAR(100),
IDF_ATIVO VARCHAR(1),
PRIMARY KEY (COD_TIPO_SALA));


CREATE TABLE SALA(NUM_SALA INT,
DSC_SALA VARCHAR(30),
IDF_SITUACAO VARCHAR(1),
COD_TIPO_SALA INT,
PRIMARY KEY (NUM_SALA),
FOREIGN KEY (COD_TIPO_SALA) REFERENCES TIPO_SALA(COD_TIPO_SALA));

CREATE TABLE CAPITULO_CID(COD_CAPITULO_CID INT,
SGI_CAPITULO_CID VARCHAR(3),
DSC_CAPITULO_CID VARCHAR(100),
PRIMARY KEY (COD_CAPITULO_CID));

CREATE TABLE CID(COD_CID INT,
DSC_CID VARCHAR(100),
COD_CAPITULO_CID INT,
PRIMARY KEY (COD_CID),
FOREIGN KEY (COD_CAPITULO_CID) REFERENCES CAPITULO_CID(COD_CAPITULO_CID));

CREATE TABLE CIDADE(COD_CIDADE INT,
NOM_CIDADE VARCHAR(100),
SGL_ESTADO VARCHAR(2),
PRIMARY KEY(COD_CIDADE));

CREATE TABLE PACIENTE(COD_PACIENTE INT,
NOM_PACIENTE VARCHAR(150),
END_PACIENTE VARCHAR(150),
IDF_SEXO VARCHAR(1),
COD_CIDADE INT,
COD_CID INT,
PRIMARY KEY(COD_PACIENTE),
FOREIGN KEY (COD_CIDADE) REFERENCES CIDADE(COD_CIDADE),
FOREIGN KEY (COD_CID) REFERENCES CID(COD_CID));

CREATE TABLE TELEFONE_PACIENTE(COD_PACIENTE INT,
NUM_TELEFONE_PACIENTE VARCHAR(12),
FOREIGN KEY(COD_PACIENTE) REFERENCES PACIENTE(COD_PACIENTE));

CREATE TABLE LABORATORIO(COD_LABORATORIO INT,
NOM_LABORATORIO VARCHAR(150),
COD_CIDADE INT,
PRIMARY KEY (COD_LABORATORIO),
FOREIGN KEY (COD_CIDADE) REFERENCES CIDADE(COD_CIDADE));

CREATE TABLE PEDIDO_COMPRA(NUM_PEDIDO_COMPRA INT,
DTA_HOR_PEDIDO_COMPRA DATETIME,
IDF_SITUACAO_PEDIDO_COMPRA VARCHAR(1),
COD_LABORATORIO INT,
PRIMARY KEY (NUM_PEDIDO_COMPRA),
FOREIGN KEY(COD_LABORATORIO) REFERENCES LABORATORIO(COD_LABORATORIO));

CREATE TABLE MEDICAMENTO_PEDIDO_COMPRA(SEQ_MEDICAMENTO_PEDIDO_COMPRA INT,
NUM_PEDIDO_COMPRA INT,
COD_MEDICAMENTO INT,
QTD_MEDICAMENTO INT,
VLR_PAGO_MEDICAMENTO DECIMAL(10,2),
PRIMARY KEY (SEQ_MEDICAMENTO_PEDIDO_COMPRA),
FOREIGN KEY(NUM_PEDIDO_COMPRA) REFERENCES PEDIDO_COMPRA(NUM_PEDIDO_COMPRA));

CREATE TABLE MEDICAMENTO(COD_MEDICAMENTO INT,
NOM_MEDICAMENTO VARCHAR(150),
IDF_TIPO_MEDICAMENTO VARCHAR(1),
QTD_ESTOQUE INT,
VLR_CUSTO_MEDICAMENTO DECIMAL(10,2),
COD_LABORATORIO INT,
PRIMARY KEY (COD_MEDICAMENTO),
FOREIGN KEY(COD_LABORATORIO) REFERENCES LABORATORIO(COD_LABORATORIO));

CREATE TABLE CONSULTA(NUM_CONSULTA INT,
DATA_AGENDAMENTO DATETIME,
DATA_ATENDIMENTO DATETIME,
DSC_DIAGNOSTICO VARCHAR(255),
DSC_ANALISE_CLINICA VARCHAR(255),
IDF_SITUACAO VARCHAR(1),
CRM_MEDICO INT,
COD_PACIENTE INT,
NUM_SALA INT,
PRIMARY KEY (NUM_CONSULTA),
FOREIGN KEY (CRM_MEDICO) REFERENCES MEDICO(CRM_MEDICO),
FOREIGN KEY (COD_PACIENTE) REFERENCES PACIENTE(COD_PACIENTE),
FOREIGN KEY (NUM_SALA) REFERENCES SALA(NUM_SALA));

CREATE TABLE RECEITA(NUM_RECEITA INT,
DATA_RECEITA DATETIME,
DSC_ORIENTACOES_GERAIS VARCHAR(150),
NUM_CONSULTA INT,
PRIMARY KEY (NUM_RECEITA),
FOREIGN KEY(NUM_CONSULTA) REFERENCES CONSULTA(NUM_CONSULTA));

CREATE TABLE PRESCRICAO(NUM_RECEITA INT,
COD_MEDICAMENTO INT,
DSC_ORIENTACOES VARCHAR (150),
DSC_DOSAGEM VARCHAR (150),
DSC_APRESENTACAO VARCHAR (150),
IDF_RETIROU_MEDICAMENTO VARCHAR(1),
FOREIGN KEY (NUM_RECEITA) REFERENCES RECEITA(NUM_RECEITA),
FOREIGN KEY (COD_MEDICAMENTO) REFERENCES MEDICAMENTO(COD_MEDICAMENTO));

DELIMITER $$
CREATE FUNCTION SITUACAO (SITUACAO VARCHAR(50))
RETURNS VARCHAR(50)
BEGIN
IF SITUACAO = ('A' OR 'C') THEN
SET  SITUACAO = REPLACE(SITUACAO,'A','AGENDADA'),
     SITUACAO = REPLACE(SITUACAO,'C','CANCELADA');
ELSE 
SET
    SITUACAO = REPLACE(SITUACAO, ERROR, ERROR);	
END IF;
 RETURN SITUACAO;    

END;
$$

INSERT INTO CONSULTA(NUM_CONSULTA, DATA_AGENDAMENTO, DATA_ATENDIMENTO, DSC_DIAGNOSTICO, DSC_ANALISE_CLINICA, IDF_SITUACAO) VALUES (1, "2012-12-25 05:40:35", "2022-02-04 08:40:20", "Epidermólise Bolhosa", "Leve", "A");
INSERT INTO CONSULTA(NUM_CONSULTA, DATA_AGENDAMENTO, DATA_ATENDIMENTO, DSC_DIAGNOSTICO, DSC_ANALISE_CLINICA, IDF_SITUACAO) VALUES (2, "2022-02-25 05:40:35", "0000-00-00 00:00:00" , "FALTOU" ,"FALTOU" , "C");

SELECT NUM_CONSULTA, DATA_AGENDAMENTO, DATA_ATENDIMENTO, DSC_DIAGNOSTICO, DSC_ANALISE_CLINICA, SITUACAO(IDF_SITUACAO)
FROM CONSULTA

DELIMITER $$
CREATE FUNCTION SEXO (SEXO VARCHAR(50))
RETURNS VARCHAR(50)
BEGIN
IF   SEXO = ('M' OR 'F') THEN
SET  SEXO = REPLACE(SEXO,'M','MASCULINO'),
     SEXO = REPLACE(SEXO,'F','FEMININO');
ELSE 
SET
     SEXO = REPLACE(SEXO, ERROR, ERROR);

END IF;
 RETURN SEXO;    

END;
$$

INSERT INTO PACIENTE(COD_PACIENTE, NOM_PACIENTE, END_PACIENTE, IDF_SEXO) VALUES(1, "Hildergarda de Bingen", "Rua dos Missionarios N° 12, Bairro da Consagração - Condado do Palatino do Reno - Sacro Império Romano", "F");
INSERT INTO PACIENTE(COD_PACIENTE, NOM_PACIENTE, END_PACIENTE, IDF_SEXO) VALUES(2, "Constantino XI Dragases Paleólogo", "Rua Ayvansaray, 34087 - Constantinopla - Império Romano Oriental", "M");

SELECT SEXO(IDF_SEXO)
FROM PACIENTE

DELIMITER $$
CREATE FUNCTION DISPONIBILIDADE (DISPONIBILIDADE VARCHAR(50))
RETURNS VARCHAR(50)
BEGIN
IF DISPONIBILIDADE = ('D' OR 'O' OR 'R' OR 'I') THEN
SET  DISPONIBILIDADE = REPLACE(DISPONIBILIDADE,'R','RESERVADA'),
     DISPONIBILIDADE = REPLACE(DISPONIBILIDADE,'D','DISPONÍVEL'),
     DISPONIBILIDADE = REPLACE(DISPONIBILIDADE,'O','OCUPADA'),
     DISPONIBILIDADE = REPLACE(DISPONIBILIDADE,'I','INDISPONÍVEL');
ELSE     
SET  DISPONIBILIDADE = REPLACE(DISPONIBILIDADE, ERROR, ERROR);
END IF;
 RETURN DISPONIBILIDADE;    

END;
$$

INSERT INTO SALA(NUM_SALA, DSC_SALA, IDF_SITUACAO) VALUES(1, "GRANDE", "O");
INSERT INTO SALA(NUM_SALA, DSC_SALA, IDF_SITUACAO) VALUES(2, "PEQUENA", "R");
INSERT INTO SALA(NUM_SALA, DSC_SALA, IDF_SITUACAO) VALUES(3, "MÉDIA", "I");
INSERT INTO SALA(NUM_SALA, DSC_SALA, IDF_SITUACAO) VALUES(4, "GRANDE", "D");
INSERT INTO SALA(NUM_SALA, DSC_SALA, IDF_SITUACAO) VALUES(5, "GRANDE", "D");
IDF_SITUACAO


SELECT DISPONIBILIDADE(IDF_SITUACAO)
FROM SALA

DELIMITER $$
CREATE FUNCTION PEDIDO (PEDIDO VARCHAR(50))
RETURNS VARCHAR(50)
BEGIN
  
IF   PEDIDO = ('A' OR 'C' OR 'R') THEN
SET
     PEDIDO = REPLACE(PEDIDO,'A','ATIVO'),
     PEDIDO = REPLACE(PEDIDO,'C','CANCELADO'),
     PEDIDO = REPLACE(PEDIDO,'R','RECEBIDO');
ELSE
SET
     PEDIDO = REPLACE(PEDIDO, ERROR, ERROR);
 END IF;    
 RETURN PEDIDO;    

END;
$$

INSERT INTO PEDIDO_COMPRA (NUM_PEDIDO_COMPRA, DTA_HOR_PEDIDO_COMPRA, IDF_SITUACAO_PEDIDO_COMPRA) VALUES (1 , "2022-04-25 04:42:35", "A");
INSERT INTO PEDIDO_COMPRA (NUM_PEDIDO_COMPRA, DTA_HOR_PEDIDO_COMPRA, IDF_SITUACAO_PEDIDO_COMPRA) VALUES (2 , "2022-05-05 12:20:12", "C");
INSERT INTO PEDIDO_COMPRA (NUM_PEDIDO_COMPRA, DTA_HOR_PEDIDO_COMPRA, IDF_SITUACAO_PEDIDO_COMPRA) VALUES (3 , "2022-03-11 07:12:25", "R");

SELECT IDF_SITUACAO_PEDIDO_COMPRA
FROM PEDIDO_COMPRA

SELECT PEDIDO(IDF_SITUACAO_PEDIDO_COMPRA)
FROM PEDIDO_COMPRA

INSERT INTO MEDICAMENTO(COD_MEDICAMENTO, NOM_MEDICAMENTO, IDF_TIPO_MEDICAMENTO, QTD_ESTOQUE, VLR_CUSTO_MEDICAMENTO) VALUES (1, "Epocler", "O", 7, 3.99);

DELIMITER $$
CREATE PROCEDURE MEDICAMENTO(
    CODIGO INT,
    ESTOQUE INT)
BEGIN
  UPDATE MEDICAMENTO
  SET COD_MEDICAMENTO = CODIGO, QTD_ESTOQUE = ESTOQUE
  WHERE COD_MEDICAMENTO = CODIGO;
 END $$   

CALL MEDICAMENTO (2, 2)
SELECT *
FROM MEDICAMENTO



DELIMITER $$
CREATE PROCEDURE INSERCAO_MED(
    CODIGO INT,
    NOME VARCHAR(150),
    TIPO VARCHAR(1))
BEGIN
  INSERT INTO MEDICAMENTO(COD_MEDICAMENTO, NOM_MEDICAMENTO, IDF_TIPO_MEDICAMENTO)
  VALUES(CODIGO, NOME, TIPO);
 END $$   
 
CALL INSERCAO_MED (2,"SINGULAIR","R");
SELECT * 
FROM MEDICAMENTO


  DELIMITER $$

 CREATE DEFINER=`root`@`localhost`

  PROCEDURE PRC_MUDA_SITUACAO_SALA(P_NUM_SALA INT, P_SITUACAO VARCHAR(100))

 BEGIN

   DECLARE V_ERROR BIGINT;

  DECLARE V_MESSAGE TEXT;

  DECLARE CONTINUE HANDLER FOR SQLWARNING BEGIN END;

   

   

   IF P_SITUACAO NOT IN ('D','O','R','I') THEN 

      SET V_ERROR = 10000;

      SET V_MESSAGE = 'SITUAÇÃO DA SALA INCORRETA!';

     CALL RAISE_MESSAGE_ERROR(V_ERROR,V_MESSAGE);

    ELSE

       UPDATE SALA SET
			IDF_SITUACAO = P_SITUACAO,
            IDF_SITUACAO = REPLACE(IDF_SITUACAO,'R', 'RESERVA'),
            IDF_SITUACAO = REPLACE(IDF_SITUACAO,'I' , 'RESERVA'),
            IDF_SITUACAO = REPLACE(IDF_SITUACAO,'D' , 'RESERVA'),
			IDF_SITUACAO = REPLACE(IDF_SITUACAO,'O' , 'RESERVA')
        WHERE NUM_SALA = P_NUM_SALA;

    END IF;

 END $$

 DELIMITER ;
 
 CALL PRC_MUDA_SITUACAO_SALA(5, 'I')

 DELIMITER $$

CREATE TRIGGER RESERVA_SALA
BEFORE UPDATE
ON CONSULTA FOR EACH ROW
BEGIN


CALL PRC_MUDA_SITUACAO_SALA(4, 'R');


END; $$


UPDATE CONSULTA
SET DATA_AGENDAMENTO = '2022-05-05 17:22:54'
WHERE NUM_CONSULTA = 2

SELECT *
FROM SALA





DELIMITER $$
SET @@SESSION.max_sp_recursion_depth=25; $$
 CREATE DEFINER=`root`@`localhost`

 PROCEDURE PRESCRICAO_RETIRADA(P_NUM_RECEITA INT, P_PRESCRICAO VARCHAR(100))

 BEGIN

    DECLARE V_ERROR BIGINT;

   DECLARE V_MESSAGE TEXT;

   DECLARE CONTINUE HANDLER FOR SQLWARNING BEGIN END;

  

   

   IF P_PRESCRICAO NOT IN ('S', 'RETIRADO') THEN 

        SET V_ERROR = 10000;

      SET V_MESSAGE = 'MEDICAMENTO NÃO RETIRADO!';

     CALL RAISE_MESSAGE_ERROR(V_ERROR,V_MESSAGE);
      

   ELSE

      
  
    UPDATE MEDICAMENTO SET
            QTD_ESTOQUE = QTD_ESTOQUE - 1
        WHERE COD_MEDICAMENTO = P_NUM_RECEITA;

   END IF;

 END $$

 DELIMITER ;

 CALL PRESCRICAO_RETIRADA (1, 'RETIRADO');

DELIMITER $$
  CREATE DEFINER=`root`@`localhost`
 TRIGGER RETIRADA_MEDICAMENTO
BEFORE UPDATE
ON PRESCRICAO FOR EACH ROW
BEGIN
 IF NEW.IDF_RETIROU_MEDICAMENTO <=> 'S' THEN
        CALL PRESCRICAO_RETIRADA (1, 'RETIRADO');
END IF;
END; $$

DROP TRIGGER RETIRADA_MEDICAMENTO

 UPDATE PRESCRICAO
SET IDF_RETIROU_MEDICAMENTO = 'S'
WHERE NUM_RECEITA = 2

SELECT * FROM MEDICAMENTO




 DELIMITER $$

  CREATE DEFINER=`root`@`localhost`

         PROCEDURE RAISE_MESSAGE_ERROR(ERRNO BIGINT UNSIGNED, MESSAGE TEXT)

                                           

  BEGIN

   SIGNAL SQLSTATE

    'ERR0R'

  SET

     MESSAGE_TEXT = MESSAGE,

     MYSQL_ERRNO = ERRNO;

  END $$

 DELIMITER ;

   DELIMITER $$

  CREATE DEFINER=`root`@`localhost`
          TRIGGER VERIFICACAO BEFORE UPDATE
         ON MEDICAMENTO FOR EACH ROW                                   
    BEGIN
      
	IF NEW.QTD_ESTOQUE <=> 0 THEN
	
          CALL RAISE_MESSAGE_ERROR(10000,'SEM ESSE MEDICAMENTO NO ESTOQUE, ESCOLHA OUTRO!');

  END IF;
  END $$
  DELIMITER ;


UPDATE MEDICAMENTO
SET QTD_ESTOQUE = 0
WHERE COD_MEDICAMENTO = 3



CREATE USER MEDICO
CREATE USER FARMACEUTICO
CREATE USER ENFERMEIRO
CREATE USER DIRETOR

GRANT SELECT, INSERT ON programacaobancodedados.* TO MEDICO;
GRANT SELECT, INSERT ON programacaobancodedados.* TO ENFERMEIRO;
GRANT SELECT, INSERT ON programacaobancodedados.* TO FARMACEUTICO;
GRANT SELECT, INSERT, UPDATE, DELETE ON programacaobancodedados.* TO DIRETOR;


GRANT EXECUTE ON   programacaobancodedados.* TO MEDICO;
GRANT EXECUTE ON   programacaobancodedados.* TO ENFERMEIRO;
GRANT EXECUTE ON   programacaobancodedados.* TO FARMACEUTICO;
GRANT EXECUTE ON   programacaobancodedados.* TO DIRETOR;


